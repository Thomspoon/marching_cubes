// Based off of code from http://paulbourke.net/geometry/polygonise/

#version 450 core

int corner_index_a_from_edge[12] = {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    0,
    1,
    2,
    3
};

int corner_index_b_from_edge[12] = {
    1,
    2,
    3,
    0,
    5,
    6,
    7,
    4,
    4,
    5,
    6,
    7
};

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

struct Triangle {
    vec4 vertex_a;
    vec4 normal_a;
    vec4 color_a;
    vec4 vertex_b;
    vec4 normal_b;
    vec4 color_b;
    vec4 vertex_c;
    vec4 normal_c;
    vec4 color_c;
};

layout (std430, binding = 0) buffer Pos
{
    vec4[16][16][16] points;
};

layout (std430, binding = 1) buffer TriangleBuffer
{
    Triangle[] triangles;
};

layout (std430, binding = 2) buffer Triangulation
{
    int triangulation[256][16];
};

layout (std430, binding = 3) buffer Scratch
{
    float scratch[1000];
};

layout(binding = 0) uniform atomic_uint num_triangles;
uniform int axis_length;
uniform float iso_level;

vec3 vertex_interpolate(vec4 p1, vec4 p2)
{
   float mu = (iso_level - p1.w) / (p2.w - p1.w);

   return p1.xyz + mu * (p2.xyz - p1.xyz);
}

int index_from_coord(int x, int y, int z)
{
    return x * axis_length * axis_length + y * axis_length + z;
}

vec4 determine_color(vec4 normal)
{
    const float PI = 3.1415926535897932384626433832795;
    const vec3 up_vector = vec3(0.0, 1.0, 0.0);

    vec4 color = vec4(0.5);

    float angle = acos(dot(up_vector, normal.xyz) / (length(up_vector) * length(normal.xyz))) * 180.0 / PI;
    if(angle <= 10.0f)
    {
        color = vec4(0.17, 0.58, .30, 0.0);
    }
    else if(angle <= 60.0f)
    {
        color = vec4(0.71, 0.44, .20, 0.0);
    }
    else if(angle <= 100.0f)
    {
        color = vec4(0.44, 0.28, 0.13, 0.0);
    }

    return color;
}

void main()
{
    ivec3 gid = ivec3(gl_GlobalInvocationID.xyz);

    // Stop one point before the end because voxel includes neighbouring points
    if (gid.x >= axis_length-1 || gid.y >= axis_length-1 || gid.z >= axis_length-1) {
        return;
    }

    // 8 corners of the current cube
    vec4 cube_corners[8] = {
        points[gid.x    ][gid.y    ][gid.z    ],
        points[gid.x + 1][gid.y    ][gid.z    ],
        points[gid.x + 1][gid.y    ][gid.z + 1],
        points[gid.x    ][gid.y    ][gid.z + 1],
        points[gid.x    ][gid.y + 1][gid.z    ],
        points[gid.x + 1][gid.y + 1][gid.z    ],
        points[gid.x + 1][gid.y + 1][gid.z + 1],
        points[gid.x    ][gid.y + 1][gid.z + 1]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    int cube_index = 0;
    if (cube_corners[0].w < iso_level) cube_index |= 1;
    if (cube_corners[1].w < iso_level) cube_index |= 2;
    if (cube_corners[2].w < iso_level) cube_index |= 4;
    if (cube_corners[3].w < iso_level) cube_index |= 8;
    if (cube_corners[4].w < iso_level) cube_index |= 16;
    if (cube_corners[5].w < iso_level) cube_index |= 32;
    if (cube_corners[6].w < iso_level) cube_index |= 64;
    if (cube_corners[7].w < iso_level) cube_index |= 128;

    if(cube_index == 0 || cube_index == 255) return;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cube_index][i] != -1; i +=3) {
        int a0 = corner_index_a_from_edge[triangulation[cube_index][i]];
        int b0 = corner_index_b_from_edge[triangulation[cube_index][i]];

        int a1 = corner_index_a_from_edge[triangulation[cube_index][i+1]];
        int b1 = corner_index_b_from_edge[triangulation[cube_index][i+1]];

        int a2 = corner_index_a_from_edge[triangulation[cube_index][i+2]];
        int b2 = corner_index_b_from_edge[triangulation[cube_index][i+2]];

        Triangle tri;

        tri.vertex_a = vec4(vertex_interpolate(cube_corners[a0], cube_corners[b0]), 0.0f);
        tri.vertex_b = vec4(vertex_interpolate(cube_corners[a1], cube_corners[b1]), 0.0f);
        tri.vertex_c = vec4(vertex_interpolate(cube_corners[a2], cube_corners[b2]), 0.0f);

        // Calculate normals, TODO: Is averaging normals with their surrounding triangles possible?
        vec3 a = tri.vertex_a.xyz - tri.vertex_b.xyz;
        vec3 b = tri.vertex_a.xyz - tri.vertex_c.xyz;
        vec3 normal = cross(a, b);
        tri.normal_a = vec4(normal, 0.0f);
        tri.normal_b = vec4(normal, 0.0f);
        tri.normal_c = vec4(normal, 0.0f);

        // Determine color
        tri.color_a = determine_color(tri.normal_a);
        tri.color_b = determine_color(tri.normal_b);
        tri.color_c = determine_color(tri.normal_c);

        triangles[atomicCounterIncrement(num_triangles)] = tri;
    }
}