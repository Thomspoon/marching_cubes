// Values from http://paulbourke.net/geometry/polygonise/

#version 450 core

int cornerIndexAFromEdge[12] = {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    0,
    1,
    2,
    3
};

int cornerIndexBFromEdge[12] = {
    1,
    2,
    3,
    0,
    5,
    6,
    7,
    4,
    4,
    5,
    6,
    7
};

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

struct Triangle {
    vec3 vertexC;
    vec3 vertexB;
    vec3 vertexA;
};

layout (std430, binding = 0) buffer Pos
{
    vec4[1000] points;
};

layout (std430, binding = 1) buffer TriangleBuffer
{
    Triangle[] triangles;
};

layout (std430, binding = 2) buffer Triangulation
{
    int triangulation[256][16];
};

layout(binding = 0) uniform atomic_uint num_triangles;
uniform int axis_length;
uniform float iso_level;

vec3 interpolateVerts(vec4 v1, vec4 v2) {
    float t = (iso_level - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * axis_length * axis_length + y * axis_length + x;
}

void main()
{
    ivec3 gid = ivec3(gl_GlobalInvocationID.xyz);

    // Stop one point before the end because voxel includes neighbouring points
    if (gid.x >= axis_length-1 || gid.y >= axis_length-1 || gid.z >= axis_length-1) {
        return;
    }

    // 8 corners of the current cube
    vec4 cubeCorners[8] = {
        points[indexFromCoord(gid.x, gid.y, gid.z)],
        points[indexFromCoord(gid.x + 1, gid.y, gid.z)],
        points[indexFromCoord(gid.x + 1, gid.y, gid.z + 1)],
        points[indexFromCoord(gid.x, gid.y, gid.z + 1)],
        points[indexFromCoord(gid.x, gid.y + 1, gid.z)],
        points[indexFromCoord(gid.x + 1, gid.y + 1, gid.z)],
        points[indexFromCoord(gid.x + 1, gid.y + 1, gid.z + 1)],
        points[indexFromCoord(gid.x, gid.y + 1, gid.z + 1)]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < iso_level) cubeIndex |= 1;
    if (cubeCorners[1].w < iso_level) cubeIndex |= 2;
    if (cubeCorners[2].w < iso_level) cubeIndex |= 4;
    if (cubeCorners[3].w < iso_level) cubeIndex |= 8;
    if (cubeCorners[4].w < iso_level) cubeIndex |= 16;
    if (cubeCorners[5].w < iso_level) cubeIndex |= 32;
    if (cubeCorners[6].w < iso_level) cubeIndex |= 64;
    if (cubeCorners[7].w < iso_level) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
        triangles[atomicCounter(num_triangles)] = tri;

        memoryBarrier();

        atomicCounterIncrement(num_triangles);
    }
}