// Based off of code from http://paulbourke.net/geometry/polygonise/

#version 450 core

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

struct Triangle {
    vec3 vertex_a;
    vec3 vertex_b;
    vec3 vertex_c;
};

layout (std430, binding = 0) buffer Pos
{
    vec4[8] points;
};

layout (std430, binding = 1) buffer TriangleBuffer
{
    Triangle[] triangles;
};

layout (std430, binding = 2) buffer Triangulation
{
    int triangulation[256][16];
};

layout (std430, binding = 3) buffer Edges
{
    int edges[256];
};

layout(binding = 0) uniform atomic_uint num_triangles;
uniform int axis_length;
uniform float iso_level;

vec3 vertex_interpolate(float iso_level, vec4 p1, vec4 p2)
{
   float mu = (iso_level - p1.w) / (p2.w - p1.w);

   return p1.xyz + mu * (p2.xyz - p1.xyz);
}

int index_from_coord(int x, int y, int z) {
    return x * axis_length * axis_length + y * axis_length + z;
}

void main()
{
    ivec3 gid = ivec3(gl_GlobalInvocationID.xyz);

    vec3 vertex_list[12];

    // Stop one point before the end because voxel includes neighbouring points
    if (gid.x >= axis_length-1 || gid.y >= axis_length-1 || gid.z >= axis_length-1) {
        return;
    }

    // 8 corners of the current cube
    vec4 cube_corners[8] = {
        points[index_from_coord(gid.x, gid.y, gid.z)],
        points[index_from_coord(gid.x + 1, gid.y, gid.z)],
        points[index_from_coord(gid.x + 1, gid.y, gid.z + 1)],
        points[index_from_coord(gid.x, gid.y, gid.z + 1)],
        points[index_from_coord(gid.x, gid.y + 1, gid.z)],
        points[index_from_coord(gid.x + 1, gid.y + 1, gid.z)],
        points[index_from_coord(gid.x + 1, gid.y + 1, gid.z + 1)],
        points[index_from_coord(gid.x, gid.y + 1, gid.z + 1)]
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    int cube_index = 0;
    if (cube_corners[0].w < iso_level) cube_index |= 1;
    if (cube_corners[1].w < iso_level) cube_index |= 2;
    if (cube_corners[2].w < iso_level) cube_index |= 4;
    if (cube_corners[3].w < iso_level) cube_index |= 8;
    if (cube_corners[4].w < iso_level) cube_index |= 16;
    if (cube_corners[5].w < iso_level) cube_index |= 32;
    if (cube_corners[6].w < iso_level) cube_index |= 64;
    if (cube_corners[7].w < iso_level) cube_index |= 128;

    // Return early if cube is not visible
    if(edges[cube_index] == 0) {
        return;
    }

   /* Find the vertices where the surface intersects the cube */
   if (bool(edges[cube_index] & 1))
      vertex_list[0] = vertex_interpolate(iso_level, cube_corners[0], cube_corners[1]);
   if (bool(edges[cube_index] & 2))
      vertex_list[1] = vertex_interpolate(iso_level, cube_corners[1], cube_corners[2]);
   if (bool(edges[cube_index] & 4))
      vertex_list[2] = vertex_interpolate(iso_level, cube_corners[2], cube_corners[3]);
   if (bool(edges[cube_index] & 8))
      vertex_list[3] = vertex_interpolate(iso_level, cube_corners[3], cube_corners[0]);
   if (bool(edges[cube_index] & 16))
      vertex_list[4] = vertex_interpolate(iso_level, cube_corners[4], cube_corners[5]);
   if (bool(edges[cube_index] & 32))
      vertex_list[5] = vertex_interpolate(iso_level, cube_corners[5], cube_corners[6]);
   if (bool(edges[cube_index] & 64))
      vertex_list[6] = vertex_interpolate(iso_level, cube_corners[6], cube_corners[7]);
   if (bool(edges[cube_index] & 128))
      vertex_list[7] = vertex_interpolate(iso_level, cube_corners[7], cube_corners[4]);
   if (bool(edges[cube_index] & 256))
      vertex_list[8] = vertex_interpolate(iso_level, cube_corners[0], cube_corners[4]);
   if (bool(edges[cube_index] & 512))
      vertex_list[9] = vertex_interpolate(iso_level, cube_corners[1], cube_corners[5]);
   if (bool(edges[cube_index] & 1024))
      vertex_list[10] = vertex_interpolate(iso_level, cube_corners[2], cube_corners[6]);
   if (bool(edges[cube_index] & 2048))
      vertex_list[11] = vertex_interpolate(iso_level, cube_corners[3], cube_corners[7]);

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cube_index][i] != -1; i +=3) {
        Triangle tri;
        tri.vertex_a = vertex_list[triangulation[cube_index][i    ]];
        tri.vertex_b = vertex_list[triangulation[cube_index][i + 1]];
        tri.vertex_c = vertex_list[triangulation[cube_index][i + 2]];
        triangles[atomicCounter(num_triangles)] = tri;

        memoryBarrier();

        atomicCounterIncrement(num_triangles);
    }
}